## Client klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license
##
## !!! This file is read-only. Maybe the used editor indicates that. !!!
##
## Customization:
##   1) copy the gcode_macro _CLIENT_VARIABLE (see below) to your printer.cfg
##   2) remove the comment mark (#) from all lines
##   3) change any value in there to your needs
##
## Use the PAUSE macro direct in your M600:
##  e.g. with a different park position front left and a minimal height of 50 
##    [gcode_macro M600]
##    description: Filament change
##    gcode: PAUSE X=10 Y=10 Z_MIN=50
##  Z_MIN will park the toolhead at a minimum of 50 mm above to bed to make it easier for you to swap filament.
##
## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 0.0   ; the value to retract while PAUSE
variable_cancel_retract   : 0.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 10.0  ; unretract speed in mm/s
variable_speed_hop        : 10.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  _SET_STATUS_LIGHT VALUE=1

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore_idle_timeout: 0
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0%}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
  _SET_STATUS_LIGHT VALUE=2
  
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if printer.idle_timeout.state|upper == "IDLE" %}
    {% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}
  {% endif %}
  _CLIENT_EXTRUDE
  RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  _SET_STATUS_LIGHT VALUE=3
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}




# homing override
#--------------------------------------------------------------------------------
[homing_override]
gcode:
  {% set ho_max       = printer.toolhead.axis_maximum %}
  {% set ho_home      = printer.toolhead.homed_axes %}
  {% set ho_act_e     = printer.toolhead.extruder %}
  {% set ho_xy_feed   = 130*60 %}
  {% set ho_z_feed    = 10*60 %}
  {% set ho_wait_time = 1000 %} # 1000ms
  
  {% if not 'z' in ho_home %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=10 ACCEL=100
  {% elif printer.gcode_move.gcode_position.z<5 %}
    G1 Z5 F300
  {% endif %}
  {% if params.X is defined and params.Y is defined %}
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    G4 P{ho_wait_time}
    G28 X Y
  {% elif params.X is defined %}
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    G4 P{ho_wait_time}
    G28 X
  {% elif params.Y is defined %}
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    G4 P{ho_wait_time}
    G28 Y
  {% else %}
    {% if printer.bed_mesh is defined %}
      {% set ho_bed_mesh=printer.bed_mesh.profile_name %}
      BED_MESH_CLEAR
    {% endif %}
    {% if ho_act_e == 'extruder1' %}
      T0 R0
    {% endif %}
    MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=-20 SPEED=15 ACCEL=350 STOP_ON_ENDSTOP=1
    MANUAL_STEPPER STEPPER=switch_stepper SET_POSITION=0
    MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=2 SPEED=15 ACCEL=350
    # 查找字符'x'和'y'是否存在于ho_home字符串内, 不存在则先复位XY轴, 如果没有Z字符说明是G28, 全复位
    {% if not params.Z is defined or not 'x' in ho_home or not 'y' in ho_home %}
      SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
      SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
      SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
      G4 P{ho_wait_time}
      G28 X Y
    {% endif %}
    {% if printer.bed_mesh is defined and ho_bed_mesh|length %}
      G1 F{ho_xy_feed} X{ho_max.x/2} Y{ho_max.y/2}
      BED_MESH_PROFILE LOAD={ho_bed_mesh}
    {% else %}
      G1 F{ho_xy_feed} X{ho_max.x/2} Y{ho_max.y/2}
    {% endif %}
    G28 Z
    G1 F{ho_z_feed} Z10
    # 判定当前活跃的挤出机
    {% if ho_act_e == 'extruder1' %}
      T1 R0
    {% endif %}
  {% endif %}


# macro gcode
#--------------------------------------------------------------------------------
[gcode_macro T0]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set T0_xy_feed   = 150*60 %}
  {% set T0_z_feed    = 10*60 %}
  {% set T0_z_offset  = 0.0 %}
  {% set T0_pos_z     = printer.gcode_move.gcode_position.z %}
  {% set T0_e_offset  = svv.e1_eoffset %}
  {% set T0_home      = printer.toolhead.homed_axes %}
  {% if params.R is defined %}
    SET_GCODE_OFFSET X=0 Y=0 Z={T0_z_offset}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
  {% elif printer.toolhead.extruder=='extruder1' %}
    {% if 'xyz' in T0_home %}
      G1 F{T0_z_feed} Z{T0_pos_z+5}
      {% if printer['extruder1'].temperature>170 and T0_e_offset>0.00001 %}
        G92 E0
        G1 F{T0_z_feed} E-{T0_e_offset}
        G92 E0
      {% endif %}
      MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=2 SPEED=15 ACCEL=350    # Lift secondary extruder SET_POSITION=0
      SET_GCODE_OFFSET X=0 Y=0 Z={T0_z_offset}                # Adjust z-height
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      {% if printer['extruder'].temperature>170 and T0_e_offset>0.00001 %}
        G92 E0
        G1 F{T0_z_feed} E{T0_e_offset}
        G92 E0
      {% else %}
        G92 E0
      {% endif %}
      G1 F{T0_z_feed} Z{T0_pos_z}
    {% else %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% endif %}
  {% else %}
    M118 The current toolheade is T0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
  {% endif %}
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro T1]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set T1_xy_feed   = 150*60 %}
  {% set T1_z_feed    = 10*60 %}
  {% set T1_pos_z     = printer.gcode_move.gcode_position.z %}
  {% set T1_x_offset  = svv.e1_xoffset %}
  {% set T1_y_offset  = svv.e1_yoffset %}
  {% set T1_z_offset  = svv.e1_zoffset %}
  {% set T1_e_offset  = svv.e1_eoffset %}
  {% set T1_home      = printer.toolhead.homed_axes %}
  {% set T1_park_x    = printer.toolhead.axis_minimum.x %}
  {% if params.R is defined %}
    MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=16.3 SPEED=15 ACCEL=350    # Position second extruder
    SET_GCODE_OFFSET X={T1_x_offset} Y={T1_y_offset} Z={T1_z_offset}              # Adjust z-height
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
  {% elif printer.toolhead.extruder=='extruder' %}
    {% if 'xyz' in T1_home %}
      G1 F{T1_z_feed} Z{T1_pos_z+5}
      {% if printer['extruder'].temperature>170 and T1_e_offset>0.00001 %}
        G92 E0
        G1 F{T1_z_feed} E-{T1_e_offset}
        G92 E0
      {% endif %}
      MANUAL_STEPPER STEPPER=switch_stepper ENABLE=1 MOVE=16.3 SPEED=15 ACCEL=350    # Position second extruder
      SET_GCODE_OFFSET X={T1_x_offset} Y={T1_y_offset} Z={T1_z_offset}              # Adjust z-height
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      {% if printer['extruder1'].temperature>170 and T1_e_offset>0.00001 %}
        G92 E0
        G1 F{T1_z_feed} E{T1_e_offset}
        G92 E0
      {% else %}
        G92 E0
      {% endif %}
      G1 F{T1_z_feed} Z{T1_pos_z}
    {% else %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
    {% endif %}
  {% else %}
    M118 The current toolheade is T1
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
  {% endif %}
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder1"'

[gcode_macro SAVE_PRINT_STATS]
gcode:
  {% set sv = printer.save_variables.variables %}
  SAVE_VARIABLE VARIABLE=curextrudertarget VALUE={printer[printer.toolhead.extruder].target}
  SAVE_VARIABLE VARIABLE=heaterbedtarget VALUE={printer.heater_bed.target}
  {% if printer.virtual_sdcard.is_active %}
    SAVE_VARIABLE VARIABLE=positionz VALUE={printer.gcode_move.gcode_position.z}
    SAVE_VARIABLE VARIABLE=positione VALUE={printer.toolhead.position.e}
    SAVE_VARIABLE VARIABLE=filepath VALUE='"{printer.print_stats.filename}"'
    SAVE_VARIABLE VARIABLE=fileposition VALUE={printer.virtual_sdcard.file_position}
    SAVE_VARIABLE VARIABLE=filesize VALUE={printer.virtual_sdcard.file_size}
    SAVE_VARIABLE VARIABLE=filamentused VALUE={printer.print_stats.filament_used}
    SAVE_VARIABLE VARIABLE=resumeflag VALUE=1
  {% endif %}

[gcode_macro POWEROFF_RESUME]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if svv.resumeflag == 1 %}
    M118 Power loss recovery, resuming print.
    ACTIVATE_EXTRUDER extruder={svv.currentextruder}
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
    SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
    SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
    SET_STEPPER_ENABLE STEPPER=extruder enable=0
    SET_STEPPER_ENABLE STEPPER=extruder1 enable=0

    SET_KINEMATIC_POSITION Z={svv.positionz}
    M82
    G90
    G92 E0
    G28 X Y
    G1 Z{svv.positionz}
    M106 S125
    M190 S{svv.heaterbedtarget}
    M109 S{svv.curextrudertarget}
    M23 plr.gcode
    M26 S{svv.fileposition}
    M24
    SAVE_VARIABLE VARIABLE=resumeflag VALUE=0
  {% endif %}

[gcode_macro REMOVE_POWEROFF_RESUME]
gcode:
    SAVE_VARIABLE VARIABLE=resumeflag VALUE=0

# auto shutdown
[gcode_macro AUTO_SHUTDOWN]
gcode: SAVE_VARIABLE VARIABLE=autoshutdown VALUE=1
[gcode_macro AUTO_SHUTDOWN_OFF]
gcode: SAVE_VARIABLE VARIABLE=autoshutdown VALUE=0
[gcode_macro _SHUT_DOWN]
gcode: {action_call_remote_method("shutdown_machine")}         #执行软件层面关机
[gcode_macro _REBOOT]
gcode: {action_call_remote_method("reboot_machine")}
[gcode_macro M81]
gcode:
  {% set is_shutdown = printer.save_variables.variables.autoshutdown|int %}
  {% if is_shutdown == 1 %}
    _SHUT_DOWN
  {% else %}
    M118 auto shutdown error
  {% endif %}

[gcode_macro _TEST_GCODE]
gcode:
  {% if printer.bed_mesh is defined %}
    {% set mash=printer.bed_mesh.profile_name %}
    {% if mash|length %}
      M118 bed_mash:{mash}
    {% else %}
      M118 no bed_mash name
    {% endif %}
  {% else %}
    M118 no bed_mash
  {% endif %}

[gcode_macro M106]
gcode:
  {% if params.S is defined %}
    {% set speed = 0.3 if 0.0<((params.S|float)/255)<0.3 else ((params.S|float)/255) %}
    {% set index = params.P|int if params.P is defined else 0 %}
    {% set fan_name =      "Nozzle_Fan0"           if index==0 and printer["fan_generic Nozzle_Fan0"] is defined
                      else "Nozzle_Fan1"           if index==1 and printer["fan_generic Nozzle_Fan1"] is defined
                      else "Auxiliary_Cooling_Fan" if index==2 and printer["fan_generic Auxiliary_Cooling_Fan"] is defined
                      else "Case_Fan"              if index==3 and printer["fan_generic Case_Fan"] is defined
                      else "No_fan" %}
    {% if fan_name=="No_fan" %}
      M118 Unknown fan
    {% else %}
      SET_FAN_SPEED FAN={fan_name} SPEED={speed}
    {% endif %}
  {% else %}
    M118 No valid params 'S'
  {% endif %}
  
[gcode_macro _SET_STATUS_LIGHT]
gcode:
  {% if params.VALUE is defined %}
    {% set l_status = params.VALUE|int %}
	{% if l_status == 1 %}
	  SET_PIN PIN=_LED_R VALUE=0
	  SET_PIN PIN=_LED_G VALUE=1
	  SET_PIN PIN=_LED_Y VALUE=0
	  SET_PIN PIN=_LED_B VALUE=0
	{% elif l_status == 2 %}
	  SET_PIN PIN=_LED_R VALUE=0
	  SET_PIN PIN=_LED_G VALUE=0
	  SET_PIN PIN=_LED_Y VALUE=1
	  SET_PIN PIN=_LED_B VALUE=1
	  G4 P500
	  SET_PIN PIN=_LED_Y VALUE=0
	  SET_PIN PIN=_LED_B VALUE=0
	  G4 P500
	  SET_PIN PIN=_LED_Y VALUE=1
	  SET_PIN PIN=_LED_B VALUE=1
	  G4 P500
	  SET_PIN PIN=_LED_Y VALUE=0
	  SET_PIN PIN=_LED_B VALUE=0
	  G4 P500
	  SET_PIN PIN=_LED_Y VALUE=1
	  SET_PIN PIN=_LED_B VALUE=1
	  G4 P500
	  SET_PIN PIN=_LED_Y VALUE=1
	  SET_PIN PIN=_LED_B VALUE=0
	{% elif l_status == 3 %}
	  {% if printer["filament_switch_sensor Filament_Sensor0"].filament_detected == True %}
		SET_PIN PIN=_LED_R VALUE=0
		SET_PIN PIN=_LED_G VALUE=1
		SET_PIN PIN=_LED_Y VALUE=0
		SET_PIN PIN=_LED_B VALUE=0
	  {% endif %}
	{% endif %}
  {% endif %}


# delay gcode
#--------------------------------------------------------------------------------
[delayed_gcode Load_Bed_Mesh]
initial_duration:1.0
gcode:
  BED_MESH_PROFILE LOAD="default"

